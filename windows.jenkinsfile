pipeline{
  agent any
  //{
    // docker {
    //   image 'maven'
    //   args '-v $HOME/.m2:/root/.m2'
    // }
  //}

  environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "springboot-app-repo"
        NEXUS_CREDENTIAL_ID = "nexus"
        // MVNHOME = tool name: 'Maven_3.8.5', type: 'maven'
        // MVNCOMMAND = "${mvnhome}/bin/mvn"
    }
  stages{
    stage ('SCM Checkout'){
      steps{
        script{
        git branch: 'main', 
        credentialsId: 'github-personal', 
        url: 'https://github.com/abhijeetroychoudhury/springboot-docker-compose.git'
      }
    }
    }
    stage('UNIT TEST'){
      steps {
        script{
	    def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
          def mvncommand = "${mvnhome}/bin/mvn"
          bat "${mvncommand} test"
        }
      }
    }

	  stage('INTEGRATION TEST'){
      steps {
        script{
	    	def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
        	def mvncommand = "${mvnhome}/bin/mvn"
          	bat "${mvncommand} verify -DskipUnitTests"
        }
      }
    }
    
    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
      steps {
        script{
	    	def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
        	def mvncommand = "${mvnhome}/bin/mvn"
          	bat "${mvncommand} checkstyle:checkstyle"
        }
      }
    }

    stage('Quality Gate Status Check'){
      steps{
        script{
			    withSonarQubeEnv('sonarQube') { 
              def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
              def mvncommand = "${mvnhome}/bin/mvn"
              bat "${mvncommand} sonar:sonar"
            }
		        /*timeout(time: 1, unit: 'HOURS') {
		          def qg = waitForQualityGate()
		            if (qg.status != 'OK') {
		            error "Pipeline aborted due to quality gate failure: ${qg.status}"
		            }
              }*/
          }
        }
      }

    stage ('MVN clean package'){
      steps{
        script{
        def mvnhome = tool name: 'Maven_3.8.5', type: 'maven'
        def mvncommand = "${mvnhome}/bin/mvn"
        bat "${mvncommand} clean package"
        }
      }
    }

    stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                  pom = readMavenPom file: "pom.xml";
                  filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                  echo "+++ ${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                  artifactPath = filesByGlob[0].path;
                  artifactExists = fileExists artifactPath;
                  if(artifactExists) {
                      echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                      nexusArtifactUploader(
                          nexusVersion: NEXUS_VERSION,
                          protocol: NEXUS_PROTOCOL,
                          nexusUrl: NEXUS_URL,
                          groupId: pom.groupId,
                          version: pom.version,
                          repository: NEXUS_REPOSITORY,
                          credentialsId: NEXUS_CREDENTIAL_ID,
                          artifacts: [
                              [artifactId: pom.artifactId,
                              classifier: '',
                              file: artifactPath,
                              type: pom.packaging],
                              [artifactId: pom.artifactId,
                              classifier: '',
                              file: "pom.xml",
                              type: "pom"]
                          ]
                      );
                  } else {
                      error "*** File: ${artifactPath}, could not be found";
                  }
                }
            }
        }

    stage ('building docker image'){
      steps{
        script{
        bat 'docker build --compress -t abhi96dock/springbooot-app:0.1 .'
    }
      }
    }
    stage('Pushing Docker Image'){
      steps{
        script{
        withCredentials([string(credentialsId: 'docker-pwd', variable: 'pwd')]) {
        bat "docker login -u abhi96dock -p ${pwd}"
        bat 'docker push abhi96dock/springbooot-app:0.1'
        }
        }
      }
   }
   
 
   stage('Run Container with application'){
     steps{
       script{
          bat 'docker-compose up -d'
       }
     }     
   }
  }
  post {
     always {
      junit(
        allowEmptyResults: true,
        testResults: '**/test-reports/*.xml'
      )
    }
  } 
}
